{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/content-keys.service.ts","./src/app/ipart-settings.service.ts","./src/app/models/content-item-data.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAGoB;;;;;;AAQvD,MAAM,YAAY;IAKvB,YAAoB,QAA8B,EAAU,IAAgB,EAAU,OAA2B;QAA7F,aAAQ,GAAR,QAAQ,CAAsB;QAAU,SAAI,GAAJ,IAAI,CAAY;QAAU,YAAO,GAAP,OAAO,CAAoB;QAJjH,UAAK,GAAG,0BAA0B,CAAC;QAEnC,oBAAe,GAAG,EAAE,CAAC;QAGnB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACvC,CAAC;IACD,sBAAsB;IACtB,QAAQ;QACN,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,IAAqB,EAAE,EAAE;YAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAkB,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,wBAAwB;IACxB,OAAO;QACL,kFAAkF;QAClF,2FAA2F;QAC3F,kCAAkC;QAClC,yBAAyB;QACzB,8BAA8B;QAG9B,MAAM,KAAK,GAAG,GAAG,CAAC;QAClB,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QACrC,MAAM,GAAG,GAAG,4DAA4D,CAAC;QACzE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC;QAC3B,2BAA2B;QAC3B,MAAM,MAAM,GAAG,IAAI,+DAAU,EAAE;aAC5B,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;aACrB,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;aACnB,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAGxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACpD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;;wEAzCU,YAAY;4FAAZ,YAAY;QCXzB,yEACE;QAAA,qEACE;QAAA,uDACF;QAAA,4DAAK;QACP,4DAAM;QACN,2EACA;QADqB,mIAAS,aAAS,IAAC;QAAxC,4DACA;QAAA,sEAAK;QAAA,uDAAe;;QAAA,4DAAM;;QAJtB,0DACF;QADE,4FACF;QAGG,0DAAe;QAAf,0IAAe;;6FDKP,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AAEM;AACF;;AAatC,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAJJ;YACP,uEAAa;YACb,0DAAa;SACd;mIAIU,SAAS,mBATlB,2DAAY,aAGZ,uEAAa;QACb,0DAAa;6FAKJ,SAAS;cAXrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;iBACb;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,0DAAa;iBACd;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAA2C;;AAKpC,MAAM,kBAAkB;IAK7B,oDAAoD;IACpD;QACE,MAAM,EAAE,GAAI,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAsB,CAAC,KAAK,CAAC;QAC/E,MAAM,GAAG,GAAI,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAsB,CAAC,KAAK,CAAC;QAEpF,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,cAAc,GAAE,GAAG,CAAC;IAC3B,CAAC;;oFAZU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACmB;AAGhB;AACe;;;;AAMtD,MAAM,oBAAqB,SAAQ,0DAAa;IAErD,YAAoB,IAAgB,EAAU,WAA+B;QAC3E,KAAK,CAAC,IAAI,CAAC,CAAC;QADM,SAAI,GAAJ,IAAI,CAAY;QAAU,gBAAW,GAAX,WAAW,CAAoB;IAG7E,CAAC;IAEM,WAAW;QAEhB,MAAM,MAAM,GAAG,IAAI,+DAAU,EAAE;aAC9B,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;aAC9C,GAAG,CAAC,gBAAgB,EAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC,MAAM,CAAC,yEAAe,EAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;;wFAbU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAA2C;AAEpC,MAAM,eAAgB,SAAQ,yDAAY;IAAjD;;QACI,UAAK,GAAG,2DAA2D,CAAC;IAExE,CAAC;CAAA;;;;;;;;;;;;;ACLD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\r\nimport { IpartSettingsService } from './ipart-settings.service';\r\nimport { ContentItemData } from './models/content-item-data';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { AppConstantService } from '@advsol/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = ' Hussein Calling Server!';\r\n  data: MySettings; // this is JSON data\r\n  loggedInPartyId = \"\";\r\n\r\n  constructor(private settings: IpartSettingsService, private http: HttpClient, private context: AppConstantService) {\r\n    this.loggedInPartyId = context.loggedInPartyId;\r\n    console.log(context.loggedInPartyId);\r\n  }\r\n  // Using commonService\r\n  ngOnInit(): void {\r\n    this.settings.GetSettings().subscribe((data: ContentItemData) => {\r\n      this.data = data.Data as MySettings;\r\n    });\r\n    this.example();\r\n  }\r\n\r\n  // Without CommonService\r\n  example(): void {\r\n    // const ck = (document.querySelector(\"#x-contentKey\") as HTMLInputElement).value;\r\n    // const cik = (document.querySelector(\"#x-contentItemKey\") as HTMLInputElement).value;    \r\n    // const params = new HttpParams()\r\n    // .set('contentKey', ck)\r\n    // .set('contentItemKey',cik);\r\n\r\n\r\n    const limit = \"1\";\r\n    const domain = window.location.href;\r\n    const token = this.context.authToken;\r\n    const url = \"https://openwater-os.secure-platform.com/ipartfactory/test\";\r\n    this.context.baseUrl = url;\r\n    // const url = \"api/party\";\r\n    const params = new HttpParams()\r\n      .set('domain', domain)\r\n      .set('token', token)\r\n      .set('partyId', this.loggedInPartyId);\r\n    \r\n    \r\n    this.http.get(url, { params: {} }).subscribe((data) => {\r\n      console.log(data);\r\n    });\r\n  }\r\n}\r\n\r\n\r\ninterface MySettings {\r\n  myStringSetting?: string;\r\n  myBoolSetting?: string;\r\n  mySelectSetting?: string;\r\n}\r\n","<div style=\"text-align:center\">\r\n  <h1>\r\n    Hello {{ title }}!\r\n  </h1>\r\n</div>\r\n<input type=\"button\" (click)=\"example()\" value=\"Simple example\" />\r\n<pre>{{data | json}}</pre>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AsiCoreModule } from '@advsol/core';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AsiCoreModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContentKeysService {\r\n\r\n  public contentKey: string;\r\n  public contentItemKey: string;\r\n\r\n  // Grab our setting keys for this iPart from the DOM\r\n  constructor() { \r\n    const ck = (document.querySelector(\"#x-contentKey\") as HTMLInputElement).value;\r\n    const cik = (document.querySelector(\"#x-contentItemKey\") as HTMLInputElement).value;\r\n\r\n    this.contentKey = ck;\r\n    this.contentItemKey =cik; \r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { CommonService } from  '@advsol/core';\r\nimport { ContentItemData } from './models/content-item-data';\r\nimport { ContentKeysService } from './content-keys.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IpartSettingsService extends CommonService {\r\n\r\n  constructor(private http: HttpClient, private contentKeys: ContentKeysService) {\r\n    super(http);\r\n    \r\n  }\r\n\r\n  public GetSettings (): Observable<ContentItemData>\r\n  {\r\n    const params = new HttpParams()\r\n    .set('contentKey', this.contentKeys.contentKey)\r\n    .set('contentItemKey',this.contentKeys.contentItemKey);\r\n    return this.single(ContentItemData,params);\r\n  }\r\n\r\n}\r\n","import {DataContract} from  '@advsol/core';\r\n\r\nexport class ContentItemData extends DataContract {\r\n    $type = 'Asi.Soa.Core.DataContracts.ContentItemData, Asi.Contracts';\r\n    Data: Data;\r\n}\r\n\r\ninterface Data {\r\n    ContentKey: string;\r\n    ContentTypeKey: string;\r\n    ContentItemKey: string;\r\n    ShowTitleFlag: boolean;\r\n    SortOrder: number;\r\n    LayoutZone: number;\r\n    ContentItemName: string;\r\n    IconUrl?: any;\r\n    Settings: any;\r\n    PartTitle?: any;\r\n    PartTitleHeadingLevel: number;\r\n    DoNotRenderInDesignMode: boolean;\r\n    CssClass?: any;\r\n    ShowBorder: boolean;\r\n    Collapsible: boolean;\r\n    Collapsed: boolean;\r\n    DisplayOnExtraSmallScreens: boolean;\r\n    DisplayOnSmallScreens: boolean;\r\n    DisplayOnMediumScreens: boolean;\r\n    DisplayOnLargeScreens: boolean;\r\n    ModuleSpecificSetting?: any;\r\n    LicenseKeyRestriction?: any;    \r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}